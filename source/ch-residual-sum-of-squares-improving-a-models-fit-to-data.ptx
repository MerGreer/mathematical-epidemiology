<chapter xml:id="ch-residual-sum-of-squares-improving-a-models-fit-to-data" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>* Residual Sum of Squares: Improving a Model's Fit to Data</title>

    <p>
      <term>***This chapter is under construction.***</term>
    </p>

    <introduction xml:id="intro-RSS">
      <objectives>
        <ul>
          <li>
            <p>
              Explore 
            </p>
          </li>
          <li>
            <p>
              Strengthen 
            </p>
          </li>
          <li>
            <p>
              Determine 
            </p>
          </li>
        </ul>
      </objectives>
  
      <p>
        In   
      </p>  
  
      <p>
        Begin in <xref ref="expl-activity-RSS"/> 
      </p>
      
      <exploration xml:id="expl-activity-RSS">
        <title>Reducing New Infections</title>
        <introduction>
          <p>
            Use the code shown, and its output, to answer the questions below.
          </p>
          <sage>
            <input>
              #Import packages
              import numpy as np
              import matplotlib.pyplot as plt
              from scipy.integrate import odeint

              plt.cla() #Clear (delete) any past plots

              #Include data from Zombie Game App
              t_steps = [0, 1, 2, 3, 4, 5, 6]
              I_data = [1, 2, 4, 10, 22, 40, 50]
              
              #Define the system of differential equations, and call it "hz"
              def hz(y, t):
                s, i = y #Define y as consisting of s and i, in that order
                dydt = [-beta * s * i, beta * s * i] #These formulas are the right-hand sides of the SI model
                return dydt
              
              beta = 0.03 #Give a value to beta
              y0 = [49, 1] #Set initial conditions for Susceptibles and Infectious, in that order
              t_range = np.arange(0.0, 7.0, 0.1) #Set the time range, then set the size of the time steps to use when "stepping through" to numerically solve
              
              sol = odeint(hz, y0, t_range) #Give the name "sol" to the lists of numerical values in the solution, and give "odeint" the information needed to solve

              print("I(0) = ", sol[0, 1])
              print("I(1) = ", sol[10, 1])
              print("I(2) = ", sol[20, 1])
              print("I(3) = ", sol[30, 1])
              print("I(4) = ", sol[40, 1])
              print("I(5) = ", sol[50, 1])
              print("I(6) = ", sol[60, 1])
              
              # Plotting commands are below
              plt.plot(t_steps, I_data,'o', markersize=4, color='orange', label='I(t) data')
              plt.plot(t_range, sol[:, 1], color='orange', linewidth=2, label='Modeled I(t)')
              plt.legend()
              plt.xlabel('Time')
              plt.ylabel('Infectious Population')
              plt.show()
            </input>
            <output>
            
            </output>
            </sage>
        </introduction>
  
        <task>
          <statement>
            <p>
              Copy the graph from the Python output, either drawing it by hand or creating a screenshot. 
            </p>
            <ol>
              <li>
                <p>
                  For the values <m>I(0)</m>, <m>I(1)</m>, <m>I(2)</m>, <m>I(3)</m>, <m>I(4)</m>, <m>I(5)</m>, and <m>I(6)</m> that are printed out in the Python output above the graph, label on your copy of the graph where each value is shown.
                </p>
              </li>
              <li>
                <p>
                  Then write out in words what the values <m>I(0)</m>, <m>I(1)</m>, <m>I(2)</m>, <m>I(3)</m>, <m>I(4)</m>, <m>I(5)</m>, and <m>I(6)</m> represent: are these data points, or values generated by a mathematical model?
                </p>
              </li>
            </ol>
          </statement>
        </task>
  
        <task>
          <statement>
            <p>
              Next, read lines 9 and 10 in the Python code. 
            </p>
            <ol>
              <li>
                <p>
                  These values combine to form several points on the output graph. On your copy of the graph, label the points determined by lines 9 and 10.
                </p>
              </li>
              <li>
                <p>
                  Then write out in words what the values from lines 9 and 10 represent: are these data points, or values generated by a mathematical model?
                </p>
              </li>
            </ol>
          </statement>
        </task>
        
        <task>
          <statement>
            <p>
              We now put parts (a) and (b) together.
            </p>
            <ol>
              <li>
                <p>
                  Use your labeled graph to compare the values in part (a) with the values in part (b). Can you draw a visual way of comparing these values at each of the times <m>t=0</m>, <m>t=1</m>, <m>t=2</m>, <m>t=3</m>, <m>t=4</m>, <m>t=5</m>, and <m>t=6</m>?
                </p>
              </li>
              <li>
                <p>
                  Starting with the visual comparison you just described: What would change in this visual comparison if the values from the model, and the values at each data point, were closer together?
                </p>
              </li>              
              <li>
                <p>
                  Turn your visual comparison ideas into some mathematical suggestions for identifying when the model and the data are closer together.
                </p>
              </li>
            </ol>
          </statement>
        </task>
        
      </exploration>
  
    </introduction>

    <section xml:id="sec-gaa">
      <title>Starter Example Comparing Data with a Model: Zombie Data</title>
      <!-- <p>Use Bates flu data. Discuss converting from New Cases to S, I, R and possibly other compartments. Also discuss different time scales (here or elsewhere): converting data and parameters between days, weeks, months, years.</p> -->
      <p>
        Suppose you have data to compare against your model. Which set of parameters is best? We start by revisiting the type of graph and data we saw with our (relatively simple) early-semester zombie models. Read through the following and make sure you understand what is happening in each command. 
      </p>

      <sage>
        <input>
          #Import packages
          import numpy as np
          import matplotlib.pyplot as plt
          from scipy.integrate import odeint
          
          plt.cla()  #Clear (delete) any past plots

          #Include data from Zombie Game App
          t_steps = [0, 1, 2, 3, 4, 5, 6]
          S_data = [49, 48, 46, 40, 28, 10, 0]
          
          #Define the system of differential equations, and call it "hz"
          def hz(y, t):
            s, i = y #Define y as consisting of s and i, in that order
            dydt = [-beta * s * i, beta * s * i] #These formulas are the right-hand sides of the SI model
            return dydt
                
          beta = 0.03 #Give a value to beta
          y0 = [49, 1] #Set initial conditions for Susceptibles and Infectious, in that order
          t_range = np.arange(0.0, 8.0, 0.1) #Set the time range, then set the size of the time steps to use when "stepping through" to numerically solve
          
          sol = odeint(hz, y0, t_range) #Give the name "sol" to the lists of numerical values in the solution, and give "odeint" the information needed to solve
          
          # Plotting commands are below
          plt.plot(t_steps, S_data,'o', markersize=4, color='blue')
          plt.plot(t_range, sol[:, 0], color='blue', linewidth=2, label='S(t)')
          plt.legend()
          plt.xlabel('time')
          plt.ylabel('population')
          plt.show()
        </input>
        <output>
        
        </output>
        </sage>

      </section>

      <section xml:id="sec-gzz">
        <title>Using RSS</title>

        <p>
          One way to compare data with a graph is by computing the Residual Sum of Squares. (There will be an explanation during class time.) Within a single model, this is a good option. Read the code block below to see how we can do this in Python.
        </p>

        <sage>
          <input>
            #Import packages
            import numpy as np
            import matplotlib.pyplot as plt
            from scipy.integrate import odeint
            
            plt.cla()  #Clear (delete) any past plots
            
            #Include data from Zombie Game App
            t_steps = [0, 1, 2, 3, 4, 5, 6]
            S_data = [49, 48, 46, 40, 28, 10, 0]
            
            #Define the system of differential equations, and call it "hz"
            def hz(y, t):
              s, i = y #Define y as consisting of s and i, in that order
              dydt = [-beta * s * i, beta * s * i] #These formulas are the right-hand sides of the SI model
              return dydt
              
            beta = 0.03 #Give a value to beta
            y0 = [49, 1] #Set initial conditions for Susceptibles and Infectious, in that order
            t_range = np.arange(0.0, 8.0, 0.1) #Set the time range, then set the size of the time steps to use when "stepping through" to numerically solve
             
            sol = odeint(hz, y0, t_range) #Give the name "sol" to the lists of numerical values in the solution, and give "odeint" the information needed to solve
            
            RSS = 0

            for x in range(0,7):
                RSS = RSS + (S_data[x] - sol[0 + 10 * x, 0])**2
                print(RSS)

            print("RSS = ", RSS)
          </input>
          <output>
          
          </output>
          </sage>

      
    </section>

    <section xml:id="sec-ra">
      <title></title>

      

      <!-- <p>Use Bates flu data? Introduce RSS. Discuss improving model fit and show how to do it. Emphasize (!!!!!!!) biological suitability of parameter choices, noise in data, etc. Consider developing a range of very good parameters, rather than imagining there is some set of "best" parameters.</p> -->
    </section>

    <section xml:id="sec-gx">
      <title>Influenza Data and RSS</title>

      <p>
        Now try computing RSS using the influenza prevalence data. The data are already written into the code block below. Time 0 is the same as October 6.
      </p>

      <p>
        Notice in the line <c>RSS = RSS + (I_prevalence_data[x] - sol[0 + 10 * x, 1])**2</c> that instead of writing <c>sol[0 + 10 * x, 0]</c> we write <c>sol[0 + 10 * x, 1]</c>. Changing the <c>0</c> to a <c>1</c> tells Python to use the next column of model values from the array of S, I, and R values, that is, to use column 1 of Infectious values rather than column 0 of Susceptible values. It is important to choose the correct column of model values when comparing with data values.
      </p>

      <sage>
        <input>
          #Import packages
          import numpy as np
          import matplotlib.pyplot as plt
          from scipy.integrate import odeint
          
          plt.cla()  #Clear (delete) any past plots
          
          #Include data from Zombie Game App
          t_steps = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
          I_prevalence_data = [5, 13, 15, 21, 27, 37, 57, 108, 146, 160, 157, 138, 102, 79, 66, 54, 45, 28, 7, 0]
          
          #Define the system of differential equations, and call it "hz"
          def hz(y, t):
            s, i, r = y #Define y as consisting of s and i, in that order
            dydt = [-beta * s * i, beta * s * i - gamma * i, gamma * i] #These formulas are the right-hand sides of the SI model
            return dydt
            
          beta = 0.00035 #Give a value to beta
          gamma = 0.33 # Give a value to gamma: 0.25-0.33 are good values for most versions of flu
          y0 = [1709, 5, 0] #Set initial conditions for S, I, and R. There were 1714 students on campus.
          t_range = np.arange(0.0, 40.0, 0.1) #Set the time range, then set the size of the time steps to use when "stepping through" to numerically solve
           
          sol = odeint(hz, y0, t_range) #Give the name "sol" to the lists of numerical values in the solution, and give "odeint" the information needed to solve
          
          # Plotting commands are below
          plt.plot(t_steps, I_prevalence_data,'o', markersize=4, color='orange')
          plt.plot(t_range, sol[:, 1], color='orange', linewidth=2, label='I(t)')
          plt.legend()
          plt.xlabel('time')
          plt.ylabel('population')
          plt.show()


          RSS = 0

          for x in range(0,20):
              RSS = RSS + (I_prevalence_data[x] - sol[0 + 10 * x, 1])**2
              #print(RSS) #Uncomment this command to see in-between RSS calculations

          print("RSS = ", RSS)
        </input>
        <output>
        
        </output>
        </sage>

    
  </section>

  </chapter>