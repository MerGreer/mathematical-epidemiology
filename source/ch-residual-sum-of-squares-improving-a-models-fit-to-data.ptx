<chapter xml:id="ch-residual-sum-of-squares-improving-a-models-fit-to-data" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>* Residual Sum of Squares: Improving a Model's Fit to Data</title>

    <p>
      <term>***This chapter is under construction.***</term>
    </p>

    <introduction xml:id="intro-RSS">
      <objectives>
        <ul>
          <li>
            <p>
              Use data from case reports to implement a new method for estimating the value of the transmission parameter <m>\beta</m>
            </p>
          </li>
          <li>
            <p>
              Understand how a <q>for</q> loop in Python helps us test many possible values of <m>\beta</m> with one click of the <c>Evaluate</c> button  
            </p>
          </li>
          <li>
            <p>
              Ensure that the results from our math-and-coding-based approach to estimating <m>\beta</m> make biological sense
            </p>
          </li>
        </ul>
      </objectives>
  
      <p>
        So far, we have estimated <m>\beta</m> in two ways: (1) visually, making adjustments so that data and graphs are closer together, starting in <xref ref="ch-visualization-graphing-model-results-and-data"/>, and (2) using a formula involving <m>\mathcal{R}_0</m> and parameters from our model, such as in <xref ref="eq-R0-sir"/> and <xref ref="eq-R0-seir"/>, to substitute in values we could find from epidemiological information and solve for <m>\beta</m>, which is typically the only unknown value in the formula. In this chapter, we learn a new approach.     
      </p>  
  
      <p>
        Begin in <xref ref="expl-RSS"/> by examining data points as well as values determined by an SI model. In this exploration, think about mathematical approaches to improve the model's fit to data.
      </p>
      
      <exploration xml:id="expl-RSS">
        <title>Visually Demonstrating Differences Between a Model and Data</title>
        <introduction>
          <p>
            This example focuses on an SI model, similar to what we worked with in <xref ref="ch-zombies-can-math-help"/> and <xref ref="ch-visualization-graphing-model-results-and-data"/>. Use the code shown, and its output, to answer the questions below.
          </p>
          <sage>
            <input>
              #Import packages
              import numpy as np
              import matplotlib.pyplot as plt
              from scipy.integrate import odeint

              plt.cla() #Clear (delete) any past plots

              #Include data from Zombie Game App
              t_steps = [0, 1, 2, 3, 4, 5, 6]
              I_data = [1, 2, 4, 10, 22, 40, 50]
              
              #Define the system of differential equations, and call it "hz"
              def hz(y, t):
                s, i = y #Define y as consisting of s and i, in that order
                dydt = [-beta * s * i, beta * s * i] #These formulas are the right-hand sides of the SI model
                return dydt
              
              beta = 0.03 #Give a value to beta
              y0 = [49, 1] #Set initial conditions for Susceptibles and Infectious, in that order
              t_range = np.arange(0.0, 7.0, 0.1) #Set the time range, then set the size of the time steps to use when "stepping through" to numerically solve
              
              sol = odeint(hz, y0, t_range) #Give the name "sol" to the lists of numerical values in the solution, and give "odeint" the information needed to solve

              print("I(0) = ", sol[0, 1])
              print("I(1) = ", sol[10, 1])
              print("I(2) = ", sol[20, 1])
              print("I(3) = ", sol[30, 1])
              print("I(4) = ", sol[40, 1])
              print("I(5) = ", sol[50, 1])
              print("I(6) = ", sol[60, 1])
              
              # Plotting commands are below
              plt.plot(t_steps, I_data,'o', markersize=4, color='orange', label='I(t) data')
              plt.plot(t_range, sol[:, 1], color='orange', linewidth=2, label='Modeled I(t)')
              plt.legend()
              plt.xlabel('Time')
              plt.ylabel('Infectious Population')
              plt.show()
            </input>
            <output>
            
            </output>
            </sage>
        </introduction>
  
        <task>
          <statement>
            <p>
              Copy the graph from the Python output, either drawing it by hand or creating a screenshot. 
            </p>
            <ol>
              <li>
                <p>
                  For the values <m>I(0)</m>, <m>I(1)</m>, <m>I(2)</m>, <m>I(3)</m>, <m>I(4)</m>, <m>I(5)</m>, and <m>I(6)</m> that are printed out in the Python output above the graph, label on your copy of the graph where each value is shown.
                </p>
              </li>
              <li>
                <p>
                  Then write out in words what the values <m>I(0)</m>, <m>I(1)</m>, <m>I(2)</m>, <m>I(3)</m>, <m>I(4)</m>, <m>I(5)</m>, and <m>I(6)</m> represent: are these data points, or values generated by a mathematical model?
                </p>
              </li>
            </ol>
          </statement>
        </task>
  
        <task>
          <statement>
            <p>
              Next, read lines 9 and 10 in the Python code. 
            </p>
            <ol>
              <li>
                <p>
                  These values combine to form several points on the output graph. On your copy of the graph, label the points determined by lines 9 and 10.
                </p>
              </li>
              <li>
                <p>
                  Then write out in words what the values from lines 9 and 10 represent: are these data points, or values generated by a mathematical model?
                </p>
              </li>
            </ol>
          </statement>
        </task>
        
        <task>
          <statement>
            <p>
              We now put parts (a) and (b) together.
            </p>
            <ol>
              <li>
                <p>
                  Use your labeled graph to compare the values in part (a) with the values in part (b). Can you draw a visual way of comparing these values at each of the times <m>t=0</m>, <m>t=1</m>, <m>t=2</m>, <m>t=3</m>, <m>t=4</m>, <m>t=5</m>, and <m>t=6</m>?
                </p>
              </li>
              <li>
                <p>
                  Starting with the visual comparison you just described: What would change visually if the values from the model, and the values at each data point, were closer together?
                </p>
              </li>              
              <li>
                <p>
                  Turn your visual comparison ideas into some mathematical suggestions for identifying when the model and the data are closer together.
                </p>
              </li>
            </ol>
          </statement>
        </task>
        
      </exploration>
  
    </introduction>

    <!-- <section xml:id="sec-gaa">
      <title>Starter Example Comparing Data with a Model: Zombie Data</title>
      <p>Use Bates flu data. Discuss converting from New Cases to S, I, R and possibly other compartments. Also discuss different time scales (here or elsewhere): converting data and parameters between days, weeks, months, years.</p>
      <p>
        Suppose you have data to compare against your model. Which set of parameters is best? We start by revisiting the type of graph and data we saw with our (relatively simple) early-semester zombie models. Read through the following and make sure you understand what is happening in each command. 
      </p>

      <sage>
        <input>
          #Import packages
          import numpy as np
          import matplotlib.pyplot as plt
          from scipy.integrate import odeint
          
          plt.cla()  #Clear (delete) any past plots

          #Include data from Zombie Game App
          t_steps = [0, 1, 2, 3, 4, 5, 6]
          S_data = [49, 48, 46, 40, 28, 10, 0]
          
          #Define the system of differential equations, and call it "hz"
          def hz(y, t):
            s, i = y #Define y as consisting of s and i, in that order
            dydt = [-beta * s * i, beta * s * i] #These formulas are the right-hand sides of the SI model
            return dydt
                
          beta = 0.03 #Give a value to beta
          y0 = [49, 1] #Set initial conditions for Susceptibles and Infectious, in that order
          t_range = np.arange(0.0, 8.0, 0.1) #Set the time range, then set the size of the time steps to use when "stepping through" to numerically solve
          
          sol = odeint(hz, y0, t_range) #Give the name "sol" to the lists of numerical values in the solution, and give "odeint" the information needed to solve
          
          # Plotting commands are below
          plt.plot(t_steps, S_data,'o', markersize=4, color='blue')
          plt.plot(t_range, sol[:, 0], color='blue', linewidth=2, label='S(t)')
          plt.legend()
          plt.xlabel('time')
          plt.ylabel('population')
          plt.show()
        </input>
        <output>
        
        </output>
        </sage>

      </section> -->

      <section xml:id="sec-residual-sum-of-squares-introduction">
        <title>Residual Sum of Squares: An Introduction</title>

        <p>
          One way to compare data with the output of a model is by computing the Residual Sum of Squares, often abbreviated to RSS. When we work with a single model to try to improve the fit of the model to a data set, RSS is a good option. <xref ref="activity-rss-intro"/> shows the process of computing RSS for a model with one choice for a value of <m>\beta</m>. Later, we show how to compare RSS for different values of <m>\beta</m> used in the same model.
        </p>

        <activity xml:id="activity-rss-intro">
          <statement>
            <p>
              In <xref ref="expl-RSS"/> we worked with both a data set, and model output, for times <m>t=0, 1, 2, 3, 4, 5, 6</m>. The values appear in <xref ref="table-si-model-data-values-and-model-output"/>, with model values rounded to two decimal places. 
            </p>
            <table xml:id="table-si-model-data-values-and-model-output">
              <title>SI Model: Data Values and Model Output</title>
              <tabular halign="center">
                <row header="yes">
                  <cell>Time </cell>
                  <cell>Data Value </cell>
                  <cell>Model Output</cell>
                </row>
                <row>
                  <cell>0</cell>
                  <cell>1</cell>
                  <cell>1.0</cell>
                </row>
                <row>
                  <cell>1</cell>
                  <cell>2</cell>
                  <cell>4.19</cell>
                </row>
                <row>
                  <cell>2</cell>
                  <cell>4</cell>
                  <cell>14.54</cell>
                </row>
                <row>
                  <cell>3</cell>
                  <cell>10</cell>
                  <cell>32.38</cell>
                </row>
                <row>
                  <cell>4</cell>
                  <cell>22</cell>
                  <cell>44.58</cell>
                </row>
                <row>
                  <cell>5</cell>
                  <cell>40</cell>
                  <cell>48.68</cell>
                </row>
                <row>
                  <cell>6</cell>
                  <cell>50</cell>
                  <cell>49.70</cell>
                </row>
              </tabular>
            </table>
            <p>
              RSS compares each Data Value from <xref ref="table-si-model-data-values-and-model-output"/> with the Model Output from the same time by subtracting one from the other and squaring the result. 
            </p>
            <ol>
              <li>
                <p>
                  Try at least two of these comparisons on your own: for times <m>t=1</m> and <m>t=2</m>, subtract the Model Output in <xref ref="table-si-model-data-values-and-model-output"/> from the corresponding Data Value and square the result. Later in this activity, we will compare these hand-computed values with the corresponding values computed via Python.
                </p>
              </li>
              <li>
                <p>
                  Next, read the code block below to identify where in the code, and how, we subtract each Model Output from its corresponding Data Value. Also identify where and how the code adds up all the squared differences to produce a total value for RSS.
                </p>
                <sage>
                  <input>
                    #Import packages
                    import numpy as np
                    import matplotlib.pyplot as plt
                    from scipy.integrate import odeint

                    #Include data from the Zombie Game App
                    t_steps = [0, 1, 2, 3, 4, 5, 6]
                    I_data = [1, 2, 4, 10, 22, 40, 50]

                    #Define the system of differential equations, and call it "hz"
                    def hz(y, t):
                      s, i = y #Define y as consisting of s and i, in that order
                      dydt = [-beta * s * i, beta * s * i] # These are the right-hand sides of the SI model
                      return dydt

                    beta = 0.03 #Give beta a value
                    y0 = [49, 1] #Set initial values for Susceptibles and Infectious, in that order
                    t_range = np.arange(0.0, 8.0, 0.1) #Set the time range, the set the size of the time steps to use when "stepping through" to numerically solve the system of differential equations

                    sol = odeint(hz, y0, t_range) #Give the name "sol" to the lists of numerical values in the solution, and give "odeint" the information needed to solve

                    RSS = 0 #Initialize the value of RSS to be 0

                    for x in range(0,7):
                      new_square = (I_data[x] - sol[10*x, 1])**2
                      print("Squared distance at time", x, "=", new_square)
                      RSS = RSS + new_square

                    print("RSS = ", RSS)
                  </input>
                  <output>
                    
                  </output>
                </sage>
              </li>
              <li>
                <p>
                  Then run the code block. Compare its results with your results for <m>t=1</m> and <m>t=2</m> in part (1) of this Activity. Describe how the results are similar and how they are different, and provide an explanation for why they are not identical. 
                </p>
                <p>
                  Then examine all the results from the code, including the total value for RSS for this model with this data set. 
                </p>
              </li>
              <li>
                <p>
                  Once you understand how the code works, experiment with different values of <m>\beta</m>. Your goal is to improve the fit between the model and the data set. While adjusting <m>\beta</m>, consider including a plot of the graph showing both the solution curve of the model and the data points. (You can do this by copying plotting commands from the Python block in this chapter's Exploration and pasting them into the Python block in this activity.)
                </p>
              </li>
            </ol>
          </statement>
          <answer>
            <ol>
              <li>
                <p>
                  At time <m>t=1</m>, compute <m>(4.19-2)^2</m> to get the value <m>4.7961</m>. At time <m>t=2</m>, compute <m>(14.54-4)^2</m> to get the value <m>111.0916</m>. 
                </p>
              </li>
              <li>
                <p>
                  In line 25, the code <c>I_data[x] - sol[10*x, 1]</c> starts with the data value given by <c>I_data[x]</c> and subtracts the model value given by <c>sol[10*x, 1]</c>. 
                </p>
                <p>
                  The <c>x</c> in <c>I_data[x]</c> is determined by the range of <c>x</c> values shown in line 24: <c>range(0,7)</c> tells Python to allow <c>x</c> to equal 0, 1, 2, 3, 4, 5, and 6. Python ranges do not include the last number shown, so 7 is not included in <c>range(0,7)</c>. 
                </p>
                <p>
                  When <c>x</c> equals 0, <c>I_data[0]</c> equals the initial value of the <c>I_data</c> list in line 8, that is, <c>I_data[0]</c> equals 1. Then <c>I_data[1]</c> equals 2, <c>I_data[2]</c> equals 4, and so on, continuing until <c>I_data[6]</c> equals 50.
                </p>
                <p>
                  The code <c>sol[10*x, 1]</c> examines Python's list of model solutions, which we have named <c>sol</c>. To see the full list <c>sol</c>, you can add a new line of code at the end of the Python block, and in that line, type <c>print(sol)</c>. Running the Python block with the <c>print(sol)</c> command shows that the list <c>sol</c> is arranged into rows and columns. Each row shows the value of both <m>S(t)</m> and <m>I(t)</m> at a specific time value. The initial column, which Python labels column <c>0</c>, shows the values of <m>S(t)</m> at all times we computed. The next column, which Python labels column <c>1</c>, shows the values of <m>I(t)</m> at all times we computed. 
                </p>
                <p>
                  The times for which we compute solutions are determined by the command <c>t_range = np.arange(0.0, 8.0, 0.1)</c> in line 18. This command says to compute solutions starting at time 0.0, and ending at time 8.0, moving in time increments of 0.1. This means we compute solutions at times 0.0, 0.1, 0.2, and so on, with the last solutions computed at time 7.9. To see the values in <c>t_range</c>, you can add a new line of code: <c>print(t_range)</c>. Running the Python block with the command <c>print(t_range)</c> shows the list of all <c>t_range</c> values. 
                </p>
              </li>
              <li>
                <p>
                  The code produces the value <m>4.795784246749833</m> for the squared distance at time <m>t=1</m>. Our hand-computed value from part (1) of this Activity was <m>4.7961</m>. We see that these values are very close to each other. The difference between them is due to our rounding the values in <xref ref="table-si-model-data-values-and-model-output"/> to two decimal points. 
                </p>
                <p>
                  Similarly, the code produces the value <m>111.02234652523701</m> for the squared distance at time <m>t=2</m>, whereas our hand-computed value from part (1) of this Activity was <m>111.0916</m>. Again, the difference in values is due to rounding.
                </p>
                <p>
                  From here, make additional observations. This is open-ended. Observations may include noticing that the squared distances are notably larger when the data point is further from the value on the solution curve of the model, compared with when the data point is close to the value on the solution curve of the model. There may also be observations about the overall number computed for RSS. This overall RSS number is helpful when we reach part (4) and try to improve the fit of the model to data
                </p>
                <p>
                  Many other observations are possible.
                </p>
              </li>
              <li>
                <p>
                  This is open-ended. Values of <m>\beta</m> that are closer to <m>0.02</m> tend to produce a better fit of model to data, compared with the starting value of <m>\beta = 0.03</m>. You may wish to change additional decimal places of <m>\beta</m> to improve the fit even further.   
                </p>
                <p>
                  It is also appropriate to give visual (graph-based) and verbal (word-based) descriptions of changes in the graph of model and data, as the value of <m>\beta</m> changes.
                </p>
              </li>
            </ol>
          </answer> 
        </activity> 


        

      
    </section>

    <section xml:id="sec-residual-sum-of-squares-quickly-comparing-multiple-parameter-values">
      <title>Residual Sum of Squares: Quickly Comparing Multiple Parameter Values</title>

      <p>
        As we saw in <xref ref="sec-residual-sum-of-squares-introduction"/>, we can compare a model with data by trying different parameter values, such as by allowing <m>\beta</m> to take on different values. In the Python code block within <xref ref="activity-rss-intro"/>, for every value of <m>\beta</m> we wanted to try, we had to change the value of <m>\beta</m> within the code and run the code again. Next, we wrap another <c>for</c> loop around the RSS <c>for</c> loop, so that we can test multiple values of <m>\beta</m> with one click of the <c>Evaluate</c> button.
      </p>

      <activity xml:id="activity-rss-beta-loop">
        <statement>
          <p>
            This Activity focuses on coding, with the goal of comparing RSS values for multiple values of a parameter without having to run Python code separately for every value of that parameter. Instead, read the code in the Python block below, and use what you read to answer the questions that follow.  
          </p>
          <sage>
            <input>
              #Import packages 
              import numpy as np 
              import matplotlib.pyplot as plt  
              from scipy.integrate import odeint
              
              #Include data from the Zombie Game App 
              t_steps = [0, 1, 2, 3, 4, 5, 6]
              I_data = [1, 2, 4, 10, 22, 40, 50]
              
              #Define the system of differential equations, and call it "hz"
              def hz(y, t):
                s, i = y #Define y as consisting of s and i, in that order
                dydt = [-beta * s * i, beta * s * i] # These are the right-hand sides of the SI model
                return dydt
                
              y0 = [49, 1] #Set initial values for Susceptibles and Infectious, in that order
              t_range = np.arange(0.0, 8.0, 0.1) #Set the time range, the set the size of the time steps to use when "stepping through" to numerically solve the system of differential equations
              
              for multiplier in range(1,6):
                beta = 0.01 * multiplier
                sol = odeint(hz, y0, t_range) #Give the name "sol" to the lists of numerical values in the solution, and give "odeint" the information needed to solve
                RSS = 0 #Initialize the value of RSS to be 0
                for x in range(0,7):
                  new_square = (I_data[x] - sol[10*x, 1])**2
                  #print("Squared distance at time", x, "=", new_square)
                  RSS = RSS + new_square
                print("RSS when beta equals", round(beta,4), ":", round(RSS,4))
            </input>
            <output>
              
            </output>
          </sage>
          <ol>
            <li>
              <p>
                Try a
              </p>
            </li>
            <li>
              <p>
                Next, 
              </p>
            </li>
            <li>
              <p>
                Then  
              </p>
            </li>
          </ol>
        </statement>
        <answer>
          <ol>
            <li>
              <p>
                At  
              </p>
            </li>
            <li>
              <p>
                The  
              </p>
            </li>
          </ol>
        </answer> 
      </activity>

      
    </section>

    <section xml:id="sec-gx">
      <title>Influenza Data and RSS</title>

      <!-- <p>Use Bates flu data? Introduce RSS. Discuss improving model fit and show how to do it. Emphasize (!!!!!!!) biological suitability of parameter choices, noise in data, etc. Consider developing a range of very good parameters, rather than imagining there is some set of "best" parameters.</p> -->

      <p>
        Now try computing RSS using the influenza prevalence data. The data are already written into the code block below. Time 0 is the same as October 6.
      </p>

      <p>
        Notice in the line <c>RSS = RSS + (I_prevalence_data[x] - sol[0 + 10 * x, 1])**2</c> that instead of writing <c>sol[0 + 10 * x, 0]</c> we write <c>sol[0 + 10 * x, 1]</c>. Changing the <c>0</c> to a <c>1</c> tells Python to use the next column of model values from the array of S, I, and R values, that is, to use column 1 of Infectious values rather than column 0 of Susceptible values. It is important to choose the correct column of model values when comparing with data values.
      </p>

      

      <sage>
        <input>
          #Import packages
          import numpy as np
          import matplotlib.pyplot as plt
          from scipy.integrate import odeint
          
          plt.cla()  #Clear (delete) any past plots
          
          #Include data from Zombie Game App
          t_steps = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
          I_prevalence_data = [5, 13, 15, 21, 27, 37, 57, 108, 146, 160, 157, 138, 102, 79, 66, 54, 45, 28, 7, 0]
          
          #Define the system of differential equations, and call it "hz"
          def hz(y, t):
            s, i, r = y #Define y as consisting of s and i, in that order
            dydt = [-beta * s * i, beta * s * i - gamma * i, gamma * i] #These formulas are the right-hand sides of the SI model
            return dydt
            
          beta = 0.00035 #Give a value to beta
          gamma = 0.33 # Give a value to gamma: 0.25-0.33 are good values for most versions of flu
          y0 = [1709, 5, 0] #Set initial conditions for S, I, and R. There were 1714 students on campus.
          t_range = np.arange(0.0, 40.0, 0.1) #Set the time range, then set the size of the time steps to use when "stepping through" to numerically solve
           
          sol = odeint(hz, y0, t_range) #Give the name "sol" to the lists of numerical values in the solution, and give "odeint" the information needed to solve
          
          # Plotting commands are below
          plt.plot(t_steps, I_prevalence_data,'o', markersize=4, color='orange')
          plt.plot(t_range, sol[:, 1], color='orange', linewidth=2, label='I(t)')
          plt.legend()
          plt.xlabel('time')
          plt.ylabel('population')
          plt.show()


          RSS = 0

          for x in range(0,20):
              RSS = RSS + (I_prevalence_data[x] - sol[0 + 10 * x, 1])**2
              #print(RSS) #Uncomment this command to see in-between RSS calculations

          print("RSS = ", RSS)
        </input>
        <output>
        
        </output>
        </sage>

    
  </section>

  </chapter>